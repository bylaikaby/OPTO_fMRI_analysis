function varargout = bruproc_gui(varargin)
%BRUPROC_GUI - GUI for post-processing of Bruker 2dseq.
%  BRUPROC_GUI run a GUI for DB's 
%
%  EXAMPLE :
%    >> bruproc_gui('setup','4.7T')
%    >> bruproc_gui('setup','7T')
%    >> bruproc_gui('setup','rat')
%
%  VERSION :
%    0.90 03.11.16 YM  pre-release
%    0.91 03.02.17 DB/YM  phasecorr_iter as 20 from 60.
%    0.92 13.12.18 YM  supports processing precision.
%    0.93 05.04.19 YM  supports psf_maxshift, psf_extrapolate and psf_medfilt2.
%
%  See also bruproc bruproc_testgui

persistent H_BRUPROC;  % keep the figure handle


% execute callback function then return -----------------------------------
if nargin > 0 && ischar(varargin{1}) && ~isempty(strfind(varargin{1},'Callback'))
  if nargout
    [varargout{1:nargout}] = feval(varargin{:});
  else
    feval(varargin{:});
  end
  return;
end


% prevent double execution -----------------------------------------------
if ishandle(H_BRUPROC)
  close(H_BRUPROC);
  %fprintf('\n ''mgui'' already opened.\n');
  %return;
end


% DEFAULT CONTROL SETTINGS ===============================================
DEF.datadir   = '//wks8/mridata_wks8';
DEF.study     = '2016mmdd_hhmmss_XXX_Y_ZZ';
DEF.scan      = '9';
DEF.reco      = '1';
DEF.phasecorr =  0;
DEF.phasecorr_iter = '20';
DEF.psfcorr   =  1;
DEF.psf_scan  = '';
DEF.psf_shift = '0 0';
DEF.psf_maskthr = '0.2';
DEF.psf_upsamp  = '8';
DEF.psf_maxshift = '10';
DEF.psf_extrapolate = 1;
DEF.psf_medfilt2    = 1;
DEF.permute   = '';
DEF.flipdim   = '';
DEF.precision = 'double';
DEF.savelog   =  1;

% update by 'RES' in the base workspace
DEF = subUpdateByRES(DEF);

% update by command-line input
for N = 1:2:length(varargin)
  switch lower(varargin{N})
   case {'setup'}
    switch lower(varargin{N+1})
     case {'debug'}
      DEF.datadir  = 'W:\';
      DEF.study    = '20161017_095530_K13_1_21';
      DEF.scan     = '37';
      DEF.reco     =  '1';
      DEF.psf_scan = '34';
      DEF.flipdim  = '';
     case {'4.7' '4.7t' 'wks12'}
      DEF.datadir  = '\\wks12\guest\mridata_wks12';
     case {'7' '7t' 'wks24'}
      DEF.datadir  = '\\wks24\data';
     case {'7h' '7th' 'wks21' 'rat'}
      DEF.datadir  = '\\wks21\data';
     case {'wks8'}
      DEF.datadir  = '\\wks8\mridata_wks8';
     case {'wks6'}
      DEF.datadir  = '\\wks8\mridata_wks6';
    end
  end
end



% GET SCREEN SIZE ========================================================
[scrW, scrH] = subGetScreenSize('char');

%figW = 60.5; figH = 19;
figW = 72.5; figH = 22;
figX = 1;  figY = scrH-figH-6;

%[figX figY figW figH]
% CREATE A MAIN FIGURE ===================================================
hMain = figure(...
    'Name',mfilename,...
    'NumberTitle','off', 'toolbar','none','MenuBar','none',...
    'Tag','main', 'units','char', 'pos',[figX figY figW figH],...
    'HandleVisibility','on', 'Resize','on',...
    'DoubleBuffer','on', 'BackingStore','on', 'Visible','on',...
    'DefaultAxesFontSize',10,...
    'DefaultAxesfontweight','bold',...
    'PaperPositionMode','auto', 'PaperType','A4', 'PaperOrientation', 'landscape');


% WIDGETS ================================================================
XDSP = 1.5; H = figH - 2.5;
% Data Dir
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP H 12.5 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''browse-datadir'',guidata(gcbo))',...
    'String','Data :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','DataDirBtn',...
    'TooltipString','Browse Bruker Data Directory',...
    'BackgroundColor',[0.5 0.8 0.8],'ForegroundColor',[0 0 0]);
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 55 1.5],...
    'String',DEF.datadir,'Tag','DataDirEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set Data Directory',...
    'FontWeight','Bold','FontName','FixedWidth');

XDSP = 1.5; H = figH - 4.5;
% Study
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP H 12.5 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''browse-study'',guidata(gcbo))',...
    'String','Study :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','StudyBtn',...
    'TooltipString','Browse Bruker Study',...
    'BackgroundColor',[0.5 0.8 0.8],'ForegroundColor',[0 0 0]);
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 55 1.5],...
    'String',DEF.study,'Tag','StudyEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set Study',...
    'FontWeight','Bold','FontName','FixedWidth');

XDSP = 1.5;  H = figH - 6.5;
% Scan/Reco number
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+1 H-0.2 30 1.5],...
    'String','EPI Scan # :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','ScanNumTxt',...
    'ForegroundColor',[0.05 0.05 0.5],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 12 1.5],...
    'String',DEF.scan,'Tag','ScanNumEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set EPI scan number',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+27 H-0.2 30 1.5],...
    'String','EPI Reco # :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','RecoNumTxt',...
    'ForegroundColor',[0.05 0.05 0.5],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String',DEF.reco,'Tag','RecoNumEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set reco number',...
    'FontWeight','Bold','FontName','FixedWidth');
% PvPar button
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP+55 H 14 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''pvpar'',guidata(gcbo))',...
    'Tag','PvParBtn','String','PvPar',...
    'TooltipString','Read/Show ParaVision Parameters','FontWeight','bold',...
    'BackgroundColor',[0.5 0.8 0.5],'ForegroundColor',[0 0 0]);


XDSP = 1.5;  H = figH - 9;
% phase correction
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+2 H 30 1.5],...
    'Tag','PhaseCorrCheck','Value',DEF.phasecorr,...
    'String','Phase Correction','FontWeight','bold',...
    'TooltipString','Phase Correction on/off',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+28 H-0.3 30 1.5],...
    'String','Num-iter :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PhaseCorrIterTxt',...
    'TooltipString','Num. of iteration',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String',DEF.phasecorr_iter,'Tag','PhaseCorrIterEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Num. of iteration',...
    'FontWeight','Bold','FontName','FixedWidth');



XDSP = 1.5;  H = figH - 11;
% PSF correction
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+2 H 30 1.5],...
    'Tag','PSFCorrCheck','Value',DEF.psfcorr,...
    'String','PSF Correction','FontWeight','bold',...
    'TooltipString','PSF Correction on/off',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+26 H-0.3 30 1.5],...
    'String','PSFScan # :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFScanTxt',...
    'TooltipString','PSF Scan #',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String',DEF.psf_scan,'Tag','PSFScanEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF Scan #',...
    'FontWeight','Bold','FontName','FixedWidth');


% TestGUI button
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP+55 H+1.25 14 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''testgui'',guidata(gcbo))',...
    'Tag','TestGuiBtn','String','Test&Plot',...
    'TooltipString','Run test and plot','FontWeight','bold',...
    'BackgroundColor',[0.8 0.8 0],'ForegroundColor',[0 0 1.0]);



XDSP = 1.5;  H = figH - 12.8;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+12.5-12 H-0.3 12 1.5],...
    'String','ShiftSize :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','PSFShiftSizeTxt',...
    'TooltipString','PSF: shift size',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 12 1.5],...
    'String',DEF.psf_shift,'Tag','PSFShiftSizeEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: shift size',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+28 H-0.3 30 1.5],...
    'String','MaskThr :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFThrTxt',...
    'TooltipString','PSF: mask-threshold: frac. of max(std)',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 8 1.5],...
    'String',DEF.psf_maskthr,'Tag','PSFThrEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: mask-threshold: frac. of max(std)',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+49 H-0.3 30 1.5],...
    'String','Upsample :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFUpsampleTxt',...
    'TooltipString','PSF: upsapmling',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+61 H 8 1.5],...
    'String',DEF.psf_upsamp,'Tag','PSFUpsampleEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: upsapmling',...
    'FontWeight','Bold','FontName','FixedWidth');
XDSP = 1.5;  H = figH - 14.8;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+12.5-12 H-0.3 12 1.5],...
    'String','MaxShift :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','PSFMaxShiftTxt',...
    'TooltipString','PSF: max shift',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 12 1.5],...
    'String',DEF.psf_maxshift,'Tag','PSFMaxShiftEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: max shift',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+27.5 H-0.3 12 1.5],...
    'String','Shift-Map :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFShiftmapTxt',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+40 H 25 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''psf-extrapolate'',guidata(gcbo))',...
    'Tag','PSFExtrapolateCheck','Value',DEF.psf_extrapolate,...
    'String','extrapolate','FontWeight','bold',...
    'TooltipString','PSF: extrapolate the shift-map','BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+57 H 25 1.5],...
    'Tag','PSFMedfilt2Check','Value',DEF.psf_medfilt2,...
    'String','medfilt2','FontWeight','bold',...
    'TooltipString','PSF: median filter to the shift-map','BackgroundColor',get(hMain,'Color'));





XDSP = 1.5;  H = figH - 12.5;


XDSP = 1.5;  H = figH - 17.5;
% permute
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+2 H-0.3 30 1.5],...
    'String','permute :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PermuteTxt',...
    'TooltipString','Order to Permute Dimensions',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 18 1.5],...
    'String',DEF.permute,'Tag','PermuteEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Order to Permute Dimensions',...
    'FontWeight','Bold','FontName','FixedWidth');
% flipdim
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+50-10 H-0.3 10 1.5],...
    'String','flipdim :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','FlipdimTxt',...
    'TooltipString','Dimension to Flip',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+51 H 18 1.5],...
    'String',DEF.flipdim,'Tag','FlipdimEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Dimension to Flip',...
    'FontWeight','Bold','FontName','FixedWidth');
XDSP = 1.5;  H = figH - 19.5;
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+2 H 30 1.5],...
    'Tag','SaveLogCheck','Value',DEF.savelog,...
    'String','Save Log','FontWeight','bold',...
    'TooltipString','Save Log on/off','BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+50-20 H-0.3 20 1.5],...
    'String','Math. Precision:','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','ProcPrecisionTxt','BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Popupmenu',...
    'Units','char','Position',[XDSP+51 H 18 1.5],...
    'String',{'single' 'double'},...
    'HorizontalAlignment','left',...
    'Tag','ProcPrecisionCmb','Value',find(strcmpi({'single' 'double'},DEF.precision)),...
    'TooltipString','Processing precision',...
    'FontWeight','bold','Background','white');




XDSP = 1.5;  H = 0.5;
% UNDO button
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP H 14  1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''undo'',guidata(gcbo))',...
    'Tag','UndoBtn','String','UNDO',...
    'TooltipString','UNDO: Pet back the orignal Bruker 2dseq','FontWeight','bold',...
    'BackgroundColor',[0.9 0.7 0.7],'ForegroundColor',[0 0 0]);

% RUN button
uicontrol(...
    'Parent',hMain,'Style','PushButton',...
    'Units','char','Position',[XDSP+14 H 56 1.5],...
    'Callback','bruproc_gui(''Main_Callback'',gcbo,''run'',guidata(gcbo))',...
    'Tag','RunBtn','String','Run PostProcessing',...
    'TooltipString','PostProcessing for Bruker 2dseq','FontWeight','bold',...
    'BackgroundColor',[0.8 0.8 0],'ForegroundColor',[0 0 1.0]);



% get widgets handles at this moment
HANDLES = findobj(hMain);
Main_Callback(hMain,'init',[]);


% NOW SET "UNITS" OF ALL WIDGETS AS "NORMALIZED".
HANDLES = HANDLES(HANDLES ~= hMain);
set(HANDLES,'units','normalized');

H_BRUPROC = hMain;

if nargout
  varargout{1} = hMain;
end
  




return


% ========================================================================
function Main_Callback(hObject,eventdata,handles)
% ========================================================================
wgts = guihandles(hObject);
%APPDATA = getappdata(wgts.main,'APPDATA');

%eventdata

switch lower(eventdata)
 case {'init'}
  
 case {'browse-datadir'}
  curdir = get(wgts.DataDirEdt,'String');
  if ~exist(curdir,'dir')
    curdir = pwd;
  end
  folder_name = uigetdir(curdir,'Select Bruker Data Directory');
  if isequal(folder_name,0)
    % cancel
  else
    set(wgts.DataDirEdt,'String',folder_name);
  end
  
  
 case {'browse-study'}
  datadir = get(wgts.DataDirEdt,'String');
  study   = get(wgts.StudyEdt,'String');
  curdir  = fullfile(datadir,study);
  if ~exist(curdir,'dir')
    if exist(datadir,'dir')
      curdir = datadir;
    else
      curdir = pwd;
    end
  end
  folder_name = uigetdir(curdir,'Select Bruker Study');
  if isequal(folder_name,0)
    % cancel
  else
    [fp,fr,fe] = fileparts(folder_name);
    set(wgts.DataDirEdt,'String',fp);
    set(wgts.StudyEdt,'String',sprintf('%s%s',fr,fe));
  end

 case {'browse-savedir'}
  curdir = get(wgts.SaveDirEdt,'String');
  if ~exist(curdir,'dir')
    curdir = pwd;
  end
  folder_name = uigetdir(curdir,'Select Directory to Save');
  if isequal(folder_name,0)
    % cancel
  else
    set(wgts.SaveDirEdt,'String',folder_name);
  end
  
 case {'psf-extrapolate'}
  if get(wgts.PSFExtrapolateCheck,'value') > 0
    set(wgts.PSFMedfilt2Check,'Enable','on')
  else
    set(wgts.PSFMedfilt2Check,'Enable','off')
  end
 
 case {'run'}
  P = subGetParams(wgts);
  
  DATAPATH = fullfile(P.datadir,P.study);
  if ~exist(DATAPATH,'dir')
    fprintf(' ERROR %s: STUDY(%s) not found in DATA-dir''%s''.\n',mfilename,P.study,P.datadir);
    return
  end
  if any(P.psf_f) && ~exist(fullfile(DATAPATH,P.psf_scan),'dir')
    fprintf(' ERROR %s: PSFscan(%s) not found in ''%s''.\n',mfilename,P.psf_scan,DATAPATH);
    return
  end
  SCANS = str2num(P.SCANS);
  RECOS = str2num(P.RECOS);
  if numel(RECOS) == 1,  RECOS(2:length(SCANS)) = RECOS(1);  end
  for K = 1:length(SCANS)
    scan = num2str(SCANS(K));
    reco = num2str(RECOS(K));

    if ~exist(fullfile(DATAPATH,scan),'dir')
        fprintf(' ERROR %s: SCAN(%s) not found in STUDY(%s).\n',mfilename,scan,P.study);
        return;
    end
    if ~exist(fullfile(DATAPATH,scan,'pdata',reco),'dir')
      fprintf(' ERROR %s: RECO(%s) not found in ''%s''.\n',mfilename,reco,fullfile(P.study,scan,'pdata'));
      return;
    end
  
    % everything fine, let's run
    cmdstr = [ 'bruproc(''' DATAPATH '''' ',' scan ',' reco ...
               ',''PhaseCorr'','           num2str(P.phase_f)  ...
               ',''PhaseCorrNSteps'','     P.phase_iter ...
               ',''PSFCorr'','             num2str(P.psf_f)  ...
               ',''PSFScan'','             P.psf_scan ...
               ',''PSFShift'','       '['  P.psf_shift    ']' ...
               ',''PSFMaskThr'','          P.psf_maskthr ...
               ',''PSFUpsample'','         P.psf_upsamp ...
               ',''PSFMaxShift'','         P.psf_maxshift ...
               ',''PSFExtrapolate'','      num2str(P.psf_extrapolate) ...
               ',''PSFMedfilt2'','         num2str(P.psf_medfilt2) ...
               ',''Permute'',' '['   P.perm_v ']' ...
               ',''FlipDim'',' '['   P.flip_v ']' ...
               ',''precision'',' '''' P.proc_prec '''' ...
               ',''SaveLog'','             num2str(P.savelog_f)  ...
               ');' ];
  
  
    fprintf('%s running: %s\n',datestr(now),cmdstr);
    eval(cmdstr);
  end

 case {'testgui'}
  P = subGetParams(wgts);
  DATAPATH = fullfile(P.datadir,P.study);
  if ~exist(DATAPATH,'dir')
    fprintf(' ERROR %s: STUDY(%s) not found in DATA-dir''%s''.\n',mfilename,P.study,P.datadir);
    return
  end
  if any(P.psf_f) && ~exist(fullfile(DATAPATH,P.psf_scan),'dir')
    fprintf(' ERROR %s: PSFscan(%s) not found in ''%s''.\n',mfilename,P.psf_scan,DATAPATH);
    return
  end
  SCANS = str2num(P.SCANS);
  RECOS = str2num(P.RECOS);
  if numel(RECOS) == 1,  RECOS(2:length(SCANS)) = RECOS(1);  end
  scan = num2str(SCANS(1));
  reco = num2str(RECOS(1));
  if ~exist(fullfile(DATAPATH,scan),'dir')
    fprintf(' ERROR %s: SCAN(%s) not found in STUDY(%s).\n',mfilename,scan,P.study);
    return
  end
  if ~exist(fullfile(DATAPATH,scan,'pdata',reco),'dir')
    fprintf(' ERROR %s: RECO(%s) not found in ''%s''.\n',mfilename,reco,fullfile(P.study,scan,'pdata'));
    return
  end

  % everything fine, let's run
  cmdstr = [ '[PIMG, OIMG, SMAP, REF, PSF] = bruproc(''' DATAPATH '''' ',' scan ',' reco ...
             ',''PhaseCorr'','           num2str(P.phase_f)  ...
             ',''PhaseCorrNSteps'','     P.phase_iter ...
             ',''PSFCorr'','             num2str(P.psf_f)  ...
             ',''PSFScan'','             P.psf_scan ...
             ',''PSFShift'','       '['  P.psf_shift    ']' ...
             ',''PSFMaskThr'','          P.psf_maskthr ...
             ',''PSFUpsample'','         P.psf_upsamp ...
             ',''PSFMaxShift'','         P.psf_maxshift ...
             ',''PSFExtrapolate'','      num2str(P.psf_extrapolate) ...
             ',''PSFMedfilt2'','         num2str(P.psf_medfilt2) ...
             ',''Permute'',' '['   P.perm_v ']' ...
             ',''FlipDim'',' '['   P.flip_v ']' ...
             ',''precision'',' '''' P.proc_prec '''' ...
             ',''SaveLog'','             num2str(P.savelog_f)  ...
             ',''Plot'',0'',''TryOneVolume'',1'');' ];
  
  
  fprintf('%s test-running(1 volume): %s\n',datestr(now),cmdstr);
  eval(cmdstr);
  RES.function = mfilename;
  RES.date     = datestr(now);
  RES.datadir  = P.datadir;
  RES.study    = P.study;
  RES.scanreco = [str2double(scan) str2double(reco)];
  RES.orig_img = OIMG;
  RES.proc_img = PIMG;
  RES.psf_shiftmap = SMAP;
  RES.psf_nmask    = REF;  % normalized PSF-mask (use 'PSFMaskThr' to binarize).
  RES.psf      = PSF;
  RES.cmdstr   = cmdstr;
  RES.params   = P;
  assignin('base','RES',RES);
  eval('bruproc_testgui(''parent'',wgts.main,''result'',RES)');
 
 
 case {'undo'}
  datadir = get(wgts.DataDirEdt,'String');
  study   = get(wgts.StudyEdt,'String');
  SCANS   = get(wgts.ScanNumEdt,'String');
  RECOS   = get(wgts.RecoNumEdt,'String');

  if ~exist(datadir,'dir')
    fprintf(' ERROR %s: DATA-directory not found/accessible, ''%s''.\n',mfilename,datadir);
    return;
  end
  DATAPATH = fullfile(datadir,study);
  if ~exist(DATAPATH,'dir')
    fprintf(' ERROR %s: STUDY(%s) not found in DATA-dir''%s''.\n',mfilename,study,datadir);
    return;
  end
  
  SCANS = str2num(SCANS);
  RECOS = str2num(RECOS);
  if numel(RECOS) == 1,  RECOS(2:length(SCANS)) = RECOS(1);  end
  for K = 1:length(SCANS)
    scan = num2str(SCANS(K));
    reco = num2str(RECOS(K));

    if ~exist(fullfile(DATAPATH,scan),'dir')
        fprintf(' ERROR %s: SCAN(%s) not found in STUDY(%s).\n',mfilename,scan,study);
        return;
    end
    if ~exist(fullfile(DATAPATH,scan,'pdata',reco),'dir')
      fprintf(' ERROR %s: RECO(%s) not found in ''%s''.\n',mfilename,reco,fullfile(study,scan,'pdata'));
      return;
    end
  
    % everything fine, let's run

    cmdstr = [ 'bruproc(''' DATAPATH '''' ',' scan ',' reco ...
               ',''undo'', 1' ...
               ');' ];
  
    fprintf('%s running: %s\n',datestr(now),cmdstr);
    eval(cmdstr);
  end


 case {'pvpar'}
  datadir = get(wgts.DataDirEdt,'String');
  study   = get(wgts.StudyEdt,'String');
  scan    = get(wgts.ScanNumEdt,'String');
  reco    = get(wgts.RecoNumEdt,'String');
  imgfile = fullfile(datadir,study,scan,'pdata',reco,'2dseq');
  
  scan = scan(1);
  if exist(imgfile,'file')
    sub_show_pvpar(imgfile,fullfile(datadir,study),[str2double(scan) str2double(reco)]);
  else
    fprintf(' ERROR %s: 2dseq not found, ''%s''.\n',mfilename,imgfile);
  end
  

 otherwise
  fprintf('WARNING %s: Main_Callback() ''%s'' not supported yet.\n',mfilename,eventdata);
end
  
return;


% ========================================================================
function P = subGetParams(wgts)
% ========================================================================

P.datadir = get(wgts.DataDirEdt,'String');
P.study   = get(wgts.StudyEdt,'String');
P.SCANS   = get(wgts.ScanNumEdt,'String');
P.RECOS   = get(wgts.RecoNumEdt,'String');

P.phase_f      = get(wgts.PhaseCorrCheck,'Value');
P.phase_iter   = get(wgts.PhaseCorrIterEdt,'String');
P.psf_f        = get(wgts.PSFCorrCheck,'Value');
P.psf_scan     = get(wgts.PSFScanEdt,'String');
P.psf_shift    = get(wgts.PSFShiftSizeEdt,'String');
P.psf_maskthr  = get(wgts.PSFThrEdt,'String');
P.psf_upsamp   = get(wgts.PSFUpsampleEdt,'String');
P.psf_maxshift = get(wgts.PSFMaxShiftEdt,'String');
P.psf_extrapolate = get(wgts.PSFExtrapolateCheck,'Value');
P.psf_medfilt2    = get(wgts.PSFMedfilt2Check,'Value');
P.perm_v     = get(wgts.PermuteEdt,'String');
P.flip_v     = get(wgts.FlipdimEdt,'String');
P.proc_prec  = get(wgts.ProcPrecisionCmb,'String');
P.proc_prec = P.proc_prec{get(wgts.ProcPrecisionCmb,'Value')};
P.savelog_f  = get(wgts.SaveLogCheck,'Value');

if ~exist(P.datadir,'dir')
  fprintf(' ERROR %s: DATA-directory not found/accessible, ''%s''.\n',mfilename,P.datadir);
  return
end
if any(P.psf_f) && isempty(P.psf_scan)
  fprintf(' ERROR %s: PSFscan is empty.\n',mfilename);
  return
end
if ~any(P.psf_extrapolate),  P.psf_medfilt2 = 0;  end

return


% ========================================================================
function DEF = subUpdateByRES(DEF)
% ========================================================================

if ~ismember('RES',evalin('base','who')), return;  end
RES = evalin('base','RES');
if ~isfield(RES,'function') || ~strcmpi(RES.function,mfilename),  return;  end

DEF.datadir = RES.params.datadir;
DEF.study   = RES.params.study;
DEF.scan    = num2str(RES.scanreco(1));
DEF.reco    = num2str(RES.scanreco(2));
DEF.psfcorr = RES.params.phase_f;
DEF.phasecorr_iter = RES.params.phase_iter;
DEF.psfcorr   = RES.params.psf_f;
DEF.psf_scan  = RES.params.psf_scan;
DEF.psf_shift = RES.params.psf_shift;
DEF.psf_maskthr = RES.params.psf_maskthr;;
DEF.psf_upsamp  = RES.params.psf_upsamp;
DEF.psf_maxshift = RES.params.psf_maxshift;
DEF.psf_extrapolate = RES.params.psf_extrapolate;
DEF.psf_medfilt2    = RES.params.psf_medfilt2;
DEF.permute   = RES.params.perm_v;
DEF.flipdim   = RES.params.flip_v;
DEF.precision = RES.params.proc_prec;
DEF.savelog   =  RES.params.savelog_f;

return



% ========================================================================
% FUNCTION to get screen size
function [scrW, scrH] = subGetScreenSize(Units)
% ========================================================================
oldUnits = get(0,'Units');
set(0,'Units',Units);
sz = get(0,'ScreenSize');
set(0,'Units',oldUnits);

scrW = sz(3);  scrH = sz(4);

return;




% ========================================================================
function varargout = sub_show_pvpar(IMGFILE,SESDIR,SCANRECO)
% ========================================================================

fprintf(' %s.sub_show_pvpar:  reading parameters...',mfilename);
PVPAR.acqp   = pvread_acqp(IMGFILE);
fprintf(' acqp.');
PVPAR.method = pvread_method(IMGFILE,'verbose',0);
if ~isempty(PVPAR.method),  fprintf(' method.');  end
PVPAR.imnd   = pvread_imnd(IMGFILE,'verbose',0);
if ~isempty(PVPAR.imnd),  fprintf(' imnd.');  end
PVPAR.reco   = pvread_reco(IMGFILE);
fprintf(' reco.');
fprintf(' done.\n');


[scrW, scrH] = subGetScreenSize('char');
% keep the figure size smaller than XGA (1024x768) for notebook PC.
% figWH: [185 57]chars = [925 741]pixels
figW = 162; figH = 35;
figX = max(min(63,scrW-figW),10);
%figY = scrH-figH-9.7;
figY = scrH-figH-10;


% SET WINDOW TITLE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tmptitle = sprintf('%s.PvPar:  %s  %d/%d',...
                   mfilename,SESDIR,SCANRECO(1),SCANRECO(2));

FontSize = 9;


hMain = figure;

set(hMain,...
    'Name',tmptitle,...
    'NumberTitle','off', 'toolbar','none','MenuBar','none',...
    'Tag','PvPar', 'units','char', 'pos',[figX figY figW figH],...
    'HandleVisibility','on', 'Resize','on',...
    'DoubleBuffer','on', 'BackingStore','on', 'Visible','on',...
    'DefaultAxesFontSize',FontSize,...
    'DefaultAxesfontweight','bold',...
    'PaperPositionMode','auto', 'PaperType','A4', 'PaperOrientation', 'landscape');

tmptxt = sprintf('%s  %d/%d  ''%s''',...
                 SESDIR,SCANRECO(1),SCANRECO(2),IMGFILE);
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[3 figH-2 150 1.5],...
    'String',tmptxt,'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','InfoTxt',...
    'BackgroundColor',get(hMain,'Color'));


uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[3 figH-3.5 30 1.5],...
    'String','ACQP :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','AcqpTxt',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Listbox',...
    'Units','char','Position',[3 1 50 figH-4.2],...
    'String',subGetPvString(PVPAR.acqp),...
    'HorizontalAlignment','left',...
    'FontSize',FontSize,...
    'Tag','AcqpList','Background','white');

if isfield(PVPAR,'method') && ~isempty(PVPAR.method)
  uicontrol(...
      'Parent',hMain,'Style','Text',...
      'Units','char','Position',[56 figH-3.5 30 1.5],...
      'String','METHOD :','FontWeight','bold',...
      'HorizontalAlignment','left',...
      'Tag','MethodTxt',...
      'BackgroundColor',get(hMain,'Color'));
  uicontrol(...
      'Parent',hMain,'Style','Listbox',...
      'Units','char','Position',[56 1 50 figH-4.2],...
      'String',subGetPvString(PVPAR.method),...
      'HorizontalAlignment','left',...
      'FontSize',FontSize,...
      'Tag','MethodList','Background','white');
else
  uicontrol(...
      'Parent',hMain,'Style','Text',...
      'Units','char','Position',[56 figH-3.5 30 1.5],...
      'String','IMND :','FontWeight','bold',...
      'HorizontalAlignment','left',...
      'Tag','ImndTxt',...
      'BackgroundColor',get(hMain,'Color'));
  uicontrol(...
      'Parent',hMain,'Style','Listbox',...
      'Units','char','Position',[56 1 50 figH-4.2],...
      'String',subGetPvString(PVPAR.imnd),...
      'HorizontalAlignment','left',...
      'FontSize',FontSize,...
      'Tag','ImndList','Background','white');
end



uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[109 figH-3.5 30 1.5],...
    'String','RECO :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','RecoTxt',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Listbox',...
    'Units','char','Position',[109 1 50 figH-4.2],...
    'String',subGetPvString(PVPAR.reco),...
    'HorizontalAlignment','left',...
    'FontSize',FontSize,...
    'Tag','RecoList','Background','white');



% get widgets handles at this moment
HANDLES = findobj(hMain);
% NOW SET "UNITS" OF ALL WIDGETS AS "NORMALIZED".
HANDLES = HANDLES(HANDLES ~= hMain);
set(HANDLES,'units','normalized');


% RETURNS THE WINDOW HANDLE IF REQUIRED.
if nargout
  varargout{1} = hMain;
end

return;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION to convert numbers to strings
function STR = subGetPvString(par)

STR = {};
fnames = fieldnames(par);
for N = 1:length(fnames)
  STR{end+1} = sprintf('%s: %s',fnames{N},sub2string(par.(fnames{N})));
end

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION to convert data into a string
function STR = sub2string(val)

STR = '';
if isempty(val),  return;  end
if ischar(val)
  STR = val;
elseif isnumeric(val)
  if isvector(val) && length(val) > 1
    STR = sprintf('[%s]',deblank(sprintf('%g ',val)));
  else
    try
      STR = num2str(val);
    catch
      STR = 'ERROR: old matlab';
    end
  end
elseif iscell(val)
  STR = sprintf('{%s}',sub2string(val{1}));
  for N = 1:length(val)
    STR = strcat(STR,sprintf(' {%s}',sub2string(val{N})));
  end
end

STR = deblank(STR);

return
