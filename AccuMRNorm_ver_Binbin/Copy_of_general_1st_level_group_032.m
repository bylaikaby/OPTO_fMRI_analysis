%-----------------------------------------------------------------------
% Job saved on 03-Mar-2024 16:06:44 by cfg_util (rev $Rev: 7345 $)
% spm SPM - SPM12 (7771)
% cfg_basicio BasicIO - Unknown
%-----------------------------------------------------------------------



%% 
clear all

% Define the base directory and subject ID
baseDir = 'D:\\CM032_bids';
subjectID = 'sub-CM032';
taskName = ["OPTO","MSTIM","OPTO+MSTIM"];
analysis_folder_name = 'first_level_analysis';
conditions = ["STIM"]; % conditions in order

regressor_rois={'D:\CM032_bids\sub-CM032\first_level_analysis\warped_temps\warped_TPM_CSF.nii',...
    'D:\CM032_bids\sub-CM032\first_level_analysis\warped_temps\warped_TPM_WM.nii'};
                                                                    
GLM_mask_file='D:\CM032_bids\sub-CM032\first_level_analysis\new_cm032_mask.nii';                                   


% assuming the onset files have been generated by Conv. 
subject_dirs=setup_GLM_directories(baseDir, subjectID, taskName, analysis_folder_name,regressor_rois,GLM_mask_file);

% setup necessary ids for the model, groupIds are the ids of the RUN of
% interest of this model.

subject_idinfo = struct(...
    'subjectID',subjectID,...
    'runIds',[12,15,17,18,20,22:28,32,33,38:41,47:50],...
    ...
...%change groupIDs to choose the runs to be analysed
    ...
    'groupIds', [20,22:28], ...
    'optoIds', [12,15,17,18,20,22:28,32,33], ...
    'mstimIds', [38:41,47:50,42:44] ...
);


%% initialise spm

tissue_regressor_file_list={};


% Loop over sessions (runs)
for iRun = 1:length(subject_idinfo.groupIds)
    clear matlabbatch
    spm('defaults', 'FMRI');

    scans = {};
    
    smoothed= true;
    
    current_scan=construct_GLM_scaninfo(subject_idinfo.groupIds(iRun), subject_idinfo, taskName, subject_dirs,smoothed);
    
     % Initialize the scans list for the current session
    
   
    scan_file = current_scan.scan_file;
    tissue_regressor_file = current_scan.regressor_file;
    vol_num = current_scan.vol_num;  % Try to read the file
    slice_num= current_scan.slice_no;
    time_retrieval =current_scan.TR;


    tissue_regressor_file_list{end+1}= tissue_regressor_file;
    if exist(tissue_regressor_file_list{end}) == 2
        fprintf('tissue regressor file already generated for the current scan %s, skip the TAPAS physio.\n',current_scan.scan_filename);
    else

    matlabbatch{1}.spm.tools.physio.save_dir = {subject_dirs.func_dir};
    matlabbatch{1}.spm.tools.physio.log_files.vendor = 'BIDS';
    matlabbatch{1}.spm.tools.physio.log_files.cardiac = '';
    matlabbatch{1}.spm.tools.physio.log_files.respiration = ''; 
    matlabbatch{1}.spm.tools.physio.log_files.scan_timing = {''};
    matlabbatch{1}.spm.tools.physio.log_files.sampling_interval = [];
    matlabbatch{1}.spm.tools.physio.log_files.relative_start_acquisition = 0;
    matlabbatch{1}.spm.tools.physio.log_files.align_scan = 'last';
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nslices =slice_num;
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.NslicesPerBeat = [];
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.TR = time_retrieval;
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Ndummies = 160;
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nscans = vol_num;
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.onset_slice = '3';
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.time_slice_to_slice = [];
    matlabbatch{1}.spm.tools.physio.scan_timing.sqpar.Nprep = [];
    matlabbatch{1}.spm.tools.physio.scan_timing.sync.nominal = struct([]);
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.modality = 'ECG';
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.filter.no = struct([]);
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.min = 0.4;
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.file = 'initial_cpulse_kRpeakfile.mat';
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.initial_cpulse_select.auto_matched.max_heart_rate_bpm = 90;
    matlabbatch{1}.spm.tools.physio.preproc.cardiac.posthoc_cpulse_select.off = struct([]);
    matlabbatch{1}.spm.tools.physio.preproc.respiratory.filter.passband = [0.01 2];
    matlabbatch{1}.spm.tools.physio.preproc.respiratory.despike = false;
    matlabbatch{1}.spm.tools.physio.model.output_multiple_regressors = current_scan.regressor_filename;
    matlabbatch{1}.spm.tools.physio.model.output_physio = 'physio.mat';
    matlabbatch{1}.spm.tools.physio.model.orthogonalise = 'none';
    matlabbatch{1}.spm.tools.physio.model.censor_unreliable_recording_intervals = false;
    matlabbatch{1}.spm.tools.physio.model.retroicor.no = struct([]);
    matlabbatch{1}.spm.tools.physio.model.rvt.no = struct([]);
    matlabbatch{1}.spm.tools.physio.model.hrv.no = struct([]);
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.fmri_files = {current_scan.scan_file
                                                                      };
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.roi_files = subject_dirs.regressor_rois(:);
                                                                      
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.force_coregister = 'No';
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.thresholds = 0.9;
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.n_voxel_crop = 0;
    matlabbatch{1}.spm.tools.physio.model.noise_rois.yes.n_components = 5;
    matlabbatch{1}.spm.tools.physio.model.movement.no = struct([]);
    matlabbatch{1}.spm.tools.physio.model.other.no = struct([]);
    matlabbatch{1}.spm.tools.physio.verbose.level = 1;
    matlabbatch{1}.spm.tools.physio.verbose.fig_output_file = [current_scan.regressor_filename,'.jpg'];
    matlabbatch{1}.spm.tools.physio.verbose.use_tabs = false;


    spm_jobman('run', matlabbatch);
    end 
end
%% 


clear matlabbatch

spm('defaults', 'FMRI');
for iRun = 1:length(subject_idinfo.groupIds)
    
  

    scans = {};
    
    
    current_scan=construct_GLM_scaninfo(subject_idinfo.groupIds(iRun), subject_idinfo, taskName, subject_dirs,smoothed);

    % If an error occurs, log it and try with taskName{2}
     
 
    % Construct file paths for all scans in the current run
    for vol = 1:current_scan.vol_num 
        frameFile = [current_scan.scan_file,',',num2str(vol)];
%         change here to modify the data taking path
        scans{end+1} = frameFile;  % Add to scans list
    end
    
    % Assign scans to the current session in the batch
    matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).scans = cellstr(scans');

    %Assign the regressor file of the scan
    matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).multi_reg=tissue_regressor_file_list(iRun);

    % access the raw IDs of each run based on runIDs
    run_number_seq=1:length(subject_idinfo.runIds);
    runIndex =run_number_seq(subject_idinfo.runIds==subject_idinfo.groupIds(iRun)); 
    % Loop over conditions to assign condition names, onset times, and durations
    duration_sum =0;
    for iCond = 1:length(conditions)
        
        matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).tmod = 0;
        matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).pmod = struct('name', {}, 'param', {}, 'poly', {});
        matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).orth = 1;
        
        condName = string(conditions{iCond});   
        matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).name = char(condName);
       
       % Construct the filenames for onset times and durations
        onset_file = fullfile(subject_dirs.onsetTimesDir, sprintf('%03d_%s_onset_times.txt',subject_idinfo.runIds(runIndex) , condName));

        duration_file = fullfile(subject_dirs.onsetTimesDir, sprintf('%03d_all_durations.txt',subject_idinfo.runIds(runIndex)));

        
        
%         if exist('duration','var')==1
%             if duration == 0||18
%                 matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).duration = duration;
%             end
%         else
%                 durations = load(duration_file);
%                 matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).duration = durations;
% 
%         end

        % Check if the onset time and duration files exist
        if exist(onset_file, 'file') 
            % Load onset times and durations from the files
            onsetTimes = load(onset_file);
            
            % Assign condition names, onset times, and durations to the current session
            matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).onset = onsetTimes;
        else
    % Display an error message
        error('File not found: %s', onset_file);   
        end

        if exist(duration_file,'file')
            all_durations = load(duration_file);

            durations = all_durations(:,iCond);

            matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).duration = durations;
        else
    % Display an error message
             warning('File not found: %s', onset_file);     
        
            if condName == 'STIM'
            duration= 12 ;
            
            elseif condName == 'BLANK_pre'
            duration= 4 ;
            elseif condName =='BLANK_post'
            duration = 28;
        
            % If there are other fields like parametric modulations (pmod), include them here
     
     
            end
        end
        duration_sum = duration_sum+mean(matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).cond(iCond).duration);
    end
    
%     matlabbatch{1}.spm.stats.fmri_spec.sess(iRun).hpf = duration_sum*2;
        
end
    matlabbatch{1}.spm.stats.fmri_spec.dir = {subject_dirs.output_dir};
    matlabbatch{1}.spm.stats.fmri_spec.timing.units = 'secs';
    matlabbatch{1}.spm.stats.fmri_spec.timing.RT = 2; % check the TR regularity!
    matlabbatch{1}.spm.stats.fmri_spec.timing.fmri_t = 18;
    matlabbatch{1}.spm.stats.fmri_spec.timing.fmri_t0 = 6;

    
    
    matlabbatch{1}.spm.stats.fmri_spec.fact = struct('name', {}, 'levels', {});
%     matlabbatch{1}.spm.stats.fmri_spec.bases.fir.length = 30;
%     matlabbatch{1}.spm.stats.fmri_spec.bases.fir.order = 15;

    matlabbatch{1}.spm.stats.fmri_spec.bases.hrf.derivs = [0 0];

    matlabbatch{1}.spm.stats.fmri_spec.volt = 1;
    matlabbatch{1}.spm.stats.fmri_spec.global = 'None';
    matlabbatch{1}.spm.stats.fmri_spec.mthresh = -Inf;
    matlabbatch{1}.spm.stats.fmri_spec.mask = {subject_dirs.mask};
    matlabbatch{1}.spm.stats.fmri_spec.cvi = 'FAST';
    
    
    %% 
    
    matlabbatch{2}.spm.stats.fmri_est.spmmat(1) = cfg_dep('fMRI model specification: SPM.mat File', substruct('.','val', '{}',{1}, '.','val', '{}',{1}, '.','val', '{}',{1}), substruct('.','spmmat'));
    matlabbatch{2}.spm.stats.fmri_est.write_residuals = 0;
    matlabbatch{2}.spm.stats.fmri_est.method.Classical = 1;
    spm_jobman('run', matlabbatch);
    


