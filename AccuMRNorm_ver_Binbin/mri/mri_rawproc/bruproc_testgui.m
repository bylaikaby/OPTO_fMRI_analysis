function varargout = bruproc_testgui(varargin)
%BRUPROC_TESTGUI - GUI for testing post-processing of Bruker 2dseq.
%  BRUPROC_TESTGUI run a GUI for DB's post-processing of Bruker 2dseq.
%  This function is called from bruproc_gui()-Test&Plot.
%
%  EXAMPLE :
%    bruproc_testgui('result',RES);  % relaunch the GUI from the base-workspace.
%
%  VERSION :
%    0.90 10.04.19 YM  skelton
%    0.92 18.04.19 YM  pre-release
%    0.92 19.04.19 YM  supports diff/div and some other mod.
%    0.93 01.05.19 YM  supports PSF shift-map/mask.
%
%  See also bruproc bruproc_gui

% persistent H_BRUPROC_TEST;  % keep the figure handle


% execute callback function then return -----------------------------------
if nargin > 0 && ischar(varargin{1}) && ~isempty(strfind(varargin{1},'Callback'))
  if nargout
    [varargout{1:nargout}] = feval(varargin{:});
  else
    feval(varargin{:});
  end
  return;
end


% prevent double execution -----------------------------------------------
% if ishandle(H_BRUPROC_TEST)
%   close(H_BRUPROC_TEST);
%   %fprintf('\n ''mgui'' already opened.\n');
%   %return;
% end


% DEFAULT CONTROL SETTINGS ===============================================
H_PARENT_WIN = [];
RES          = [];
for N = 1:2:length(varargin)
  switch lower(varargin{N})
   case {'parent' 'parentwindow' 'parentwin'}
    H_PARENT_WIN = varargin{N+1};
   case {'result' 'res'}
    RES = varargin{N+1};
  end
end

if isempty(RES),  return;  end



% GET SCREEN SIZE ========================================================
[scrW, scrH] = subGetScreenSize('char');

%figW = 60.5; figH = 19;
figW = 152; figH = 50;
figX = 75;  figY = scrH-figH-6;

%[figX figY figW figH]
% CREATE A MAIN FIGURE ===================================================
tmptxt = sprintf('%s: %s [%d %d] %s',mfilename, ...
                 RES.study, RES.scanreco(1), RES.scanreco(2), RES.date);
hMain = figure(...
    'Name',tmptxt,...
    'NumberTitle','off', ...
    'Tag','main', 'units','char', 'pos',[figX figY figW figH],...
    'HandleVisibility','on', 'Resize','on',...
    'DoubleBuffer','on', 'BackingStore','on', 'Visible','on',...
    'DefaultAxesFontSize',10,...
    'DefaultAxesfontweight','bold',...
    'PaperPositionMode','auto', 'PaperType','A4', 'PaperOrientation', 'landscape');


% WIDGETS ================================================================
XDSP = 1.5; H = figH - 2.5;
% Data Dir
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+16-15 H-0.2 15 1.5],...
    'String','DataDir :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','DataDirTxt',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+17 H 55 1.5],...
    'String',RES.datadir,'Tag','DataDirEdt',...
    'Enable','inactive',...
    'HorizontalAlignment','left',...
    'FontWeight','Bold','FontName','FixedWidth');

XDSP = 1.5; H = figH - 4.5;
RECODIR = fullfile(RES.study,num2str(RES.scanreco(1)),'pdata',num2str(RES.scanreco(2)));
% Original EPI
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+16-15 H-0.2 15 1.5],...
    'String','Original EPI :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','OriginaEPIlTxt',...
    'ForegroundColor',[0.05 0.05 0.5],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+17 H 55 1.5],...
    'String',fullfile(RECODIR,'2dseq_orig'),'Tag','OriginalEPIEdt',...
    'HorizontalAlignment','left',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');

% Corrected EPI
XDSP = 1.5;  H = figH - 6.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+16-17 H-0.2 17 1.5],...
    'String','Corrected EPI :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','CorrectedEPITxt',...
    'ForegroundColor',[0.05 0.05 0.5],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+17 H 55 1.5],...
    'String',fullfile(RECODIR,'2dseq'),'Tag','CorrectedEPIEdt',...
    'HorizontalAlignment','left',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');


% ANA Scan/Reco number
XDSP = 1.5;  H = figH - 8.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+16-15 H-0.2 15 1.5],...
    'String','ANA Scan # :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','AnaScanNumTxt',...
    'ForegroundColor',[0.01 0.45 0.01],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+17 H 12 1.5],...
    'String','','Tag','AnaScanNumEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set ANA scan number',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+30 H-0.2 30 1.5],...
    'String','Reco # :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','AnaRecoNumTxt',...
    'ForegroundColor',[0.01 0.45 0.01],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String','1','Tag','AnaRecoNumEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set ANA reco number',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+52 H-0.2 30 1.5],...
    'String','Slices :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','AnaSlicesTxt',...
    'ForegroundColor',[0.01 0.45 0.01],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+60 H 12 1.5],...
    'String','','Tag','AnaSlicesEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Set ANA slices for EPI',...
    'FontWeight','Bold','FontName','FixedWidth');



% processed parameters
P = RES.params;
XDSP = 77;  H = figH - 2.5;
% phase correction
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+2 H 30 1.5],...
    'Tag','PhaseCorrCheck','Value',P.phase_f,...
    'String','Phase Correction','FontWeight','bold',...
    'TooltipString','Phase Correction on/off',...
    'Enable','inactive',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+28 H-0.3 30 1.5],...
    'String','Num-iter :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PhaseCorrIterTxt',...
    'TooltipString','Num. of iteration',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String',P.phase_iter,'Tag','PhaseCorrIterEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','Num. of iteration',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');



XDSP = 77;  H = figH - 4.5;
% PSF correction
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+2 H 30 1.5],...
    'Tag','PSFCorrCheck','Value',P.psf_f,...
    'String','PSF Correction','FontWeight','bold',...
    'TooltipString','PSF Correction on/off',...
    'Enable','inactive',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+26 H-0.3 30 1.5],...
    'String','PSFScan # :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFScanTxt',...
    'TooltipString','PSF Scan #',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 12 1.5],...
    'String',P.psf_scan,'Tag','PSFScanEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF Scan #',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');

XDSP = 77;  H = figH - 6.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+12.5-12 H-0.3 12 1.5],...
    'String','ShiftSize :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','PSFShiftSizeTxt',...
    'TooltipString','PSF: shift size',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 12 1.5],...
    'String',P.psf_shift,'Tag','PSFShiftSizeEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: shift size',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+28 H-0.3 30 1.5],...
    'String','MaskThr :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFThrTxt',...
    'TooltipString','PSF: mask-threshold: frac. of max(std)',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+40 H 8 1.5],...
    'String',P.psf_maskthr,'Tag','PSFThrEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: mask-threshold: frac. of max(std)',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+49 H-0.3 30 1.5],...
    'String','Upsample :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFUpsampleTxt',...
    'TooltipString','PSF: upsapmling',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+61 H 8 1.5],...
    'String',P.psf_upsamp,'Tag','PSFUpsampleEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: upsapmling',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');
XDSP = 77;  H = figH - 8.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+12.5-12 H-0.3 12 1.5],...
    'String','MaxShift :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','PSFMaxShiftTxt',...
    'TooltipString','PSF: max shift',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+14 H 12 1.5],...
    'String',P.psf_maxshift,'Tag','PSFMaxShiftEdt',...
    'HorizontalAlignment','left',...
    'TooltipString','PSF: max shift',...
    'Enable','inactive',...
    'FontWeight','Bold','FontName','FixedWidth');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+27.5 H-0.3 12 1.5],...
    'String','Shift-Map :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','PSFShiftmapTxt',...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+40 H 25 1.5],...
    'Callback','bruproc_testgui(''Main_Callback'',gcbo,''psf-extrapolate'',guidata(gcbo))',...
    'Tag','PSFExtrapolateCheck','Value',P.psf_extrapolate,...
    'String','extrapolate','FontWeight','bold',...
    'Enable','inactive',...
    'TooltipString','PSF: extrapolate the shift-map','BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+57 H 25 1.5],...
    'Tag','PSFMedfilt2Check','Value',P.psf_medfilt2,...
    'String','medfilt2','FontWeight','bold',...
    'Enable','inactive',...
    'TooltipString','PSF: median filter to the shift-map','BackgroundColor',get(hMain,'Color'));


% ================================================
% WIDGETS FOR DISPLAYING DATA
XDSP = 1.5; H = figH - 10.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+16-15 H-0.2 15 1.5],...
    'String','EPI Scale :','FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Tag','EPIScaleTxt',...
    'ForegroundColor',[0.05 0.05 0.5],...
    'BackgroundColor',get(hMain,'Color'));
uicontrol(...
    'Parent',hMain,'Style','Edit',...
    'Units','char','Position',[XDSP+17 H 15 1.5],...
    'String','','Tag','EPIScaleEdt',...
    'HorizontalAlignment','center',...
    'Callback','bruproc_testgui(''Main_Callback'',gcbo,''epi-scale'',guidata(gcbo))',...
    'TooltipString','EPI scale [min max]',...
    'FontWeight','Bold','FontName','FixedWidth');



% widgets for Axes1
XDSP = 1.5; H = figH - 12.5;
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+5 H-0.3 12 1.5],...
    'String','Plot :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','Plot1Txt',...
    'BackgroundColor',get(hMain,'Color'));
cmdstr = {'original EPI' 'corrected EPI' 'diff: corr-orig' 'div: corr/orig'};
if isfield(RES,'psf_shiftmap') && ~isempty(RES.psf_shiftmap)
  cmdstr = [cmdstr, 'PSF: shift-map' 'PSF: mask'];
end
uicontrol(...
    'Parent',hMain,'Style','Popupmenu',...
    'Units','char','Position',[XDSP+12 H 20 1.5],...
    'String',cmdstr,...
    'HorizontalAlignment','left',...
    'Tag','Plot1Cmb','Value',1,...
    'TooltipString','Data to plot',...
    'Callback','bruproc_testgui(''Main_Callback'',gcbo,''redraw1'',guidata(gcbo))',...
    'FontWeight','bold','Background','white');
uicontrol(...
    'Parent',hMain,'Style','Text',...
    'Units','char','Position',[XDSP+35 H-0.3 12 1.5],...
    'String','Overlay :','FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Tag','Overlay1Txt',...
    'foregroundcolor',[0.7 0.1 0.1],...
    'BackgroundColor',get(hMain,'Color'));
cmdstr = {'none' 'original EPI' 'corrected EPI'};
if isfield(RES,'psf_shiftmap') && ~isempty(RES.psf_shiftmap)
  cmdstr = [cmdstr, 'PSF: Maskthr'];
end
uicontrol(...
    'Parent',hMain,'Style','Popupmenu',...
    'Units','char','Position',[XDSP+45 H 20 1.5],...
    'String',cmdstr,...
    'HorizontalAlignment','left',...
    'Tag','Overlay1Cmb','Value',1,...
    'TooltipString','Data to overlay',...
    'Callback','bruproc_testgui(''Main_Callback'',gcbo,''redraw1'',guidata(gcbo))',...
    'FontWeight','bold','Background','white');
uicontrol(...
    'Parent',hMain,'Style','Checkbox',...
    'Units','char','Position',[XDSP+68 H 30 1.5],...
    'Tag','Overlay1EdgeCheck','Value',0,...
    'String','edge detection','FontWeight','bold',...
    'TooltipString','edge on/off',...
    'Callback','bruproc_testgui(''Main_Callback'',gcbo,''redraw1'',guidata(gcbo))',...
    'BackgroundColor',get(hMain,'Color'));




% Axes1
XDSP = 5; H = 2;
XSZ = figW-XDSP-3; YSZ = 35;
axes(...
    'Parent',hMain,'Tag','ImageAxes1',...
    'Units','char','Position',[XDSP H XSZ YSZ],...
    'xticklabel','','yticklabel','','xtick',[],'ytick',[],...
    'FontSize',7,...
    'Box','on','color','black','layer','top');

% % Axes2 (for future extension)
% XDSP = figW-XSZ-5; H = 2;
% axes(...
%     'Parent',hMain,'Tag','ImageAxes2',...
%     'Units','char','Position',[XDSP H XSZ YSZ],...
%     'xticklabel','','yticklabel','','xtick',[],'ytick',[],...
%     'FontSize',7,...
%     'Box','on','color','black','layer','top');








% get widgets handles at this moment
HANDLES = findobj(hMain);
setappdata(hMain,'RES',RES);
Main_Callback(hMain,'init',[]);


% NOW SET "UNITS" OF ALL WIDGETS AS "NORMALIZED".
HANDLES = HANDLES(HANDLES ~= hMain);
set(HANDLES,'units','normalized');

H_BRUPROC_TEST = hMain;

if nargout
  varargout{1} = hMain;
end
  




return


% ========================================================================
function Main_Callback(hObject,eventdata,handles)
% ========================================================================
wgts = guihandles(hObject);
RES = getappdata(wgts.main,'RES');

%eventdata

switch lower(eventdata)
 case {'init'}
  if ~isfield(RES,'orig_img'), return;  end
  
  colormap(wgts.main,gray(256));
  if isfield(RES,'orig_img') && ~isempty(RES.orig_img)
    Main_Callback(wgts.main,'epi-scale');
  end
 case {'epi-scale'}
  episcale = str2num(get(wgts.EPIScaleEdt,'String'));
  if ~any(episcale) || numel(episcale) ~= 2
    maxv = max(RES.orig_img(:));
    set(wgts.EPIScaleEdt,'String',sprintf('0  %d',maxv));
    episcale = [0 double(maxv)];
  end
  RES.orig_img_scaled = sub_scale_image(double(RES.orig_img),episcale);
  RES.proc_img_scaled = sub_scale_image(double(RES.proc_img),episcale);
  setappdata(wgts.main,'RES',RES);

  Main_Callback(wgts.main,'redraw1');
  Main_Callback(wgts.main,'redraw2');

 case {'redraw1'}
  sub_Draw(wgts,1);

 case {'redraw2'}
  
  
 otherwise
  fprintf('WARNING %s: Main_Callback() ''%s'' not supported yet.\n',mfilename,eventdata);
end
  
return


% ========================================================================
function sub_Draw(wgts,WhichAxes)
% ========================================================================
if WhichAxes == 1
  hAxes = wgts.ImageAxes1;
  set(wgts.main,'CurrentAxes',wgts.ImageAxes1);
  plot_str = get(wgts.Plot1Cmb,'String');
  plot_str = plot_str{get(wgts.Plot1Cmb,'Value')};
  overlay_str = get(wgts.Overlay1Cmb,'String');
  overlay_str = overlay_str{get(wgts.Overlay1Cmb,'Value')};
  overlayEdge = get(wgts.Overlay1EdgeCheck,'Value'); 
else
  hAxes = wgts.ImageAxes2;
  plot_str = get(wgts.Plot2Cmb,'String');
  plot_str = plot_str{get(wgts.Plot2Cmb,'Value')};
  overlay_str = get(wgts.Overlay2Cmb,'String');
  overlay_str = overlay_str{get(wgts.Overlay2Cmb,'Value')};
  overlayEdge = get(wgts.Overlay2EdgeCheck,'Value'); 
end
set(wgts.main,'CurrentAxes',hAxes);
delete(findobj(hAxes,'tag','testimage'));
delete(findobj(hAxes,'tag','testtext'));
delete(findobj(hAxes,'tag','testpoly'));

oldv = get(hAxes,'units');
set(hAxes,'units','pixels');
tmppos = get(hAxes,'position');
aspect = tmppos(3)/tmppos(4);
set(hAxes,'units',oldv);
clear oldv tmppos;

cmap = get(wgts.main,'colormap');

RES = getappdata(wgts.main,'RES');
IMG1 = [];
switch lower(plot_str)
 case {'original epi'}
  IMG1 = sub_montage(RES.orig_img_scaled,aspect);
 case {'corrected epi'}
  IMG1 = sub_montage(RES.proc_img_scaled,aspect);
 case {'diff:corr-orig' 'diff: corr-orig'}
  IMG1 = sub_montage(double(RES.proc_img) - double(RES.orig_img),aspect);
  minv = min(IMG1(:));  maxv = max(IMG1(:));
  fprintf('%s: min/max(diff) = [%g %g]\n',mfilename,minv,maxv);
  % making -maxv~+maxv to 0~+1: i.e. 0.5 as the middle (0)
  maxv = max(abs(minv),abs(maxv));
  IMG1 = (IMG1 + maxv) / (maxv+maxv);
 case {'div:corr/orig' 'div: corr/orig'}
  IMGO = double(RES.orig_img);
  IMGO(abs(IMGO) < eps) = 1;  % avoid div-by-zero
  IMG1 = double(RES.proc_img) ./ IMGO;
  clear IMGO
  IMG1 = sub_montage(IMG1,aspect);
  minv = min(IMG1(:));  maxv = max(IMG1(:));
  vscale = 5;
  fprintf('%s: min/max(div) = [%g %g]; scaled/clipped to [0 %g]\n',mfilename,minv,maxv,vscale);
  % making 0~5 to 0~+1: i.e. 0.5 as the middle (1.0).
  IMG1 = IMG1 / vscale;
  IMG1(IMG1(:) < 0) = 0;
  IMG1(IMG1(:) > 1) = 1;
 
 case {'psf: shift-map'}
  IMG1 = sub_montage(RES.psf_shiftmap,aspect);
  maxv = ceil(max(abs(IMG1(:))));
  fprintf('%s: min/max(shift-map) = [%g %g]; scaled/clipped to [0 1]\n',mfilename,-maxv,maxv);
  IMG1 = (IMG1+maxv) / (maxv+maxv);
  IMG1(IMG1(:) < 0) = 0;
  IMG1(IMG1(:) > 1) = 1;
  cmap = jet(256);
  
 case {'psf: mask'}
  IMG1 = sub_montage(RES.psf_nmask,aspect);
  maxv = max(abs(IMG1(:)));
  fprintf('%s: min/max(psf-mask) = [0 %g]; scacled/clipped to [0 1]\n',mfilename,maxv);
  IMG1 = IMG1/maxv;
  IMG1(IMG1(:) < 0) = 0;
  IMG1(IMG1(:) > 1) = 1;
  cmap = jet(256);
 
 otherwise
  % anatomy
end

IMG2 = [];  h = [];
switch lower(overlay_str)
 case {'none'}
  % no overlay
  IMG1 = ind2rgb(round(IMG1*(size(cmap,1)-1) + 1),cmap);  % +1 for matlab-indexing.
  h = image(hAxes,IMG1);
 case {'original epi'}
  % do overlay of original EPI
  IMG2 = sub_montage(RES.orig_img_scaled,aspect);
  h = image(hAxes,sub_make_overlay(IMG1,IMG2,cmap,overlayEdge));
 case {'corrected epi'}
  % do overlay of corrected EPI
  IMG2 = sub_montage(RES.proc_img_scaled,aspect);
  h = image(hAxes,sub_make_overlay(IMG1,IMG2,cmap,overlayEdge));
 case {'psf: maskthr'}
  IMG1 = ind2rgb(round(IMG1*(size(cmap,1)-1) + 1),cmap);  % +1 for matlab-indexing.
  h = image(hAxes,IMG1);
  if isfield(RES,'psf_nmask_boundaries')
    boundaries = RES.psf_nmask_boundaries;
  else
    bmpsf = sub_montage(RES.psf_nmask,aspect);
    bw_filled = imfill(bmpsf > str2double(RES.params.psf_maskthr),'holes');
    boundaries = bwboundaries(bw_filled);
    RES.psf_nmask_boundaries = boundaries;
    setappdata(wgts.main,'RES',RES);  % keep boundaries
  end

  hold on;
  for N=1:length(boundaries),
    tmpxy = boundaries{N};
    plot(tmpxy(:,2),tmpxy(:,1),'k','tag','testpoly','linewidth',2);
    plot(tmpxy(:,2),tmpxy(:,1),'w','tag','testpoly');
  end
  txtcol = [0.8, 0.8, 0.8];
  if strcmpi(plot_str,'psf: shift-map')
    % make darker.
    txtcol = 1 - txtcol;
  end
  text(0.85,0.04,sprintf('MaskThr=%s',RES.params.psf_maskthr),'color',txtcol,...
       'units','normalized','tag','testtext');
  
 otherwise
  % do overlay of anatomy
end

if ishandle(h)
  set(h,'tag','testimage');
end


if WhichAxes == 1
  set(hAxes,'FontSize',7);
else
  set(hAxes,'FontSize',7,'YAxisLocation','right');
end


% make sure to have the correct tag, in case of reset by any plot functions.
if WhichAxes == 1
  set(hAxes,'tag','ImageAxes1');
else
  set(hAxes,'tag','ImageAxes2');
end


return



% ========================================================================
function IMG = sub_make_overlay(IMG1,IMG2,cmap,f_edge)
% ========================================================================

sz1 = size(IMG1);
sz2 = size(IMG2);
if ~isequal(sz1,sz2)
  fprintf(' WARNING %s: different image size for overlay, scaled to IMG1.\n',mfilename);
  IMG2 = imresize(IMG2,sz1);
end

if any(f_edge)
  IMG  = ind2rgb(round(IMG1*(size(cmap,1)-1) + 1),cmap);
  IMG2 = edge(IMG2,'approxcanny');
  IMG2 = double(IMG2)*0.8;
  sz = size(IMG);
  IMG = reshape(IMG,[sz(1)*sz(2) sz(3)]);
  tmpidx = IMG2(:) > 0;
  IMG(tmpidx, 1) = IMG2(tmpidx);
  IMG = reshape(IMG,sz);
else
  IMG = zeros([sz1 3]);
  IMG(:,:,1) = IMG2;  % red channel
  IMG(:,:,2) = IMG1;  % green channel
end

return


% ========================================================================
function IMG = sub_scale_image(IMG,MinMaxV)
% ========================================================================
IMG = double(IMG);  MinMaxV = double(MinMaxV);
if isempty(MinMaxV)
  MinMaxV = [min(IMG(:)) max(IMG(:))];
end

IMG = IMG - MinMaxV(1);
IMG = IMG / (MinMaxV(2) - MinMaxV(1));

IMG(IMG(:) < 0) = 0;
IMG(IMG(:) > 1) = 1;

return


% ========================================================================
function MIMG = sub_montage(IMG,aspect_ratio)
% ========================================================================
if nargin < 2,  aspect_ratio = 1;  end
IMG = permute(IMG,[2 1 4 3]);  % [Y X 1 Slice]

% Function Scope
nZ = size(IMG,4);
nY = size(IMG,1);
nX = size(IMG,2);

mCols = ceil(sqrt(aspect_ratio*nY*nZ/nX));
mRows = ceil(nZ/mCols);

montImageSz = [mRows*nY mCols*nX size(IMG,3) 1];
MIMG = zeros(montImageSz,class(IMG));

rows = 1:nY;
cols = 1:nX;
z = 1;
for r = 0:mRows-1
  for c = 0:mCols-1,
    if z <= nZ
      MIMG(rows + r * nY, cols + c * nX, :) = IMG(:,:,:,z);
    else
      break;
    end
    z = z + 1;
  end
end

return


% ========================================================================
function h = subFindParentWindow()
% ========================================================================

hobjs = findobj('type','figure','name','bruproc_gui');
if numel(hobjs) == 1,
  h = hobjs;
else
  h = [];
end

return


% ========================================================================
% FUNCTION to get screen size
function [scrW, scrH] = subGetScreenSize(Units)
% ========================================================================
oldUnits = get(0,'Units');
set(0,'Units',Units);
sz = get(0,'ScreenSize');
set(0,'Units',oldUnits);

scrW = sz(3);  scrH = sz(4);

return
