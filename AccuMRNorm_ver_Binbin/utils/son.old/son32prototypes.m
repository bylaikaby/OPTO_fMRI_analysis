function [methodinfo,structs,enuminfo]=son32prototypes;
%SON32PROTOTYPES Create structures to define interfaces found in 'SonTMP'.

%This function was generated by loadlibrary.m parser version 1.1.6.13 on Wed Jan 17 11:40:27 2007
%perl options:'SonTMP.i -outfile=son32prototypes.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
% void WINAPI SONInitFiles ( void ); 
fcns.name{fcnNum}='SONInitFiles'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void WINAPI SONCleanUp ( void ); 
fcns.name{fcnNum}='SONCleanUp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% short WINAPI SONOpenOldFile ( const char * name , int iOpenMode ); 
fcns.name{fcnNum}='SONOpenOldFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONOpenNewFile ( const char * name , short fMode , unsigned short extra ); 
fcns.name{fcnNum}='SONOpenNewFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring', 'int16', 'uint16'};fcnNum=fcnNum+1;
% short WINAPI SONCanWrite ( short fh ); 
fcns.name{fcnNum}='SONCanWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONCloseFile ( short fh ); 
fcns.name{fcnNum}='SONCloseFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONEmptyFile ( short fh ); 
fcns.name{fcnNum}='SONEmptyFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONSetBuffSpace ( short fh ); 
fcns.name{fcnNum}='SONSetBuffSpace'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONGetFreeChan ( short fh ); 
fcns.name{fcnNum}='SONGetFreeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% void WINAPI SONSetFileClock ( short fh , unsigned short usPerTime , unsigned short timePerADC ); 
fcns.name{fcnNum}='SONSetFileClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
% short WINAPI SONSetADCChan ( short fh , unsigned short chan , short sPhyCh , short dvd , long lBufSz , const char * szCom , const char * szTitle , float fRate , float scl , float offs , const char * szUnt ); 
fcns.name{fcnNum}='SONSetADCChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int16', 'int32', 'cstring', 'cstring', 'single', 'single', 'single', 'cstring'};fcnNum=fcnNum+1;
% short WINAPI SONSetADCMarkChan ( short fh , unsigned short chan , short sPhyCh , short dvd , long lBufSz , const char * szCom , const char * szTitle , float fRate , float scl , float offs , const char * szUnt , unsigned short points , short preTrig ); 
fcns.name{fcnNum}='SONSetADCMarkChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int16', 'int32', 'cstring', 'cstring', 'single', 'single', 'single', 'cstring', 'uint16', 'int16'};fcnNum=fcnNum+1;
% short WINAPI SONSetWaveChan ( short fh , unsigned short chan , short sPhyCh , TSTime dvd , long lBufSz , const char * szCom , const char * szTitle , float scl , float offs , const char * szUnt ); 
fcns.name{fcnNum}='SONSetWaveChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'int32', 'cstring', 'cstring', 'single', 'single', 'cstring'};fcnNum=fcnNum+1;
% short WINAPI SONSetWaveMarkChan ( short fh , unsigned short chan , short sPhyCh , TSTime dvd , long lBufSz , const char * szCom , const char * szTitle , float fRate , float scl , float offs , const char * szUnt , unsigned short points , short preTrig , int nTrace ); 
fcns.name{fcnNum}='SONSetWaveMarkChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'int32', 'cstring', 'cstring', 'single', 'single', 'single', 'cstring', 'uint16', 'int16', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONSetRealMarkChan ( short fh , unsigned short chan , short sPhyCh , long lBufSz , const char * szCom , const char * szTitle , float fRate , float min , float max , const char * szUnt , unsigned short points ); 
fcns.name{fcnNum}='SONSetRealMarkChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'cstring', 'cstring', 'single', 'single', 'single', 'cstring', 'uint16'};fcnNum=fcnNum+1;
% short WINAPI SONSetTextMarkChan ( short fh , unsigned short chan , short sPhyCh , long lBufSz , const char * szCom , const char * szTitle , float fRate , const char * szUnt , unsigned short points ); 
fcns.name{fcnNum}='SONSetTextMarkChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'cstring', 'cstring', 'single', 'cstring', 'uint16'};fcnNum=fcnNum+1;
% void WINAPI SONSetInitLow ( short fh , unsigned short chan , short bLow ); 
fcns.name{fcnNum}='SONSetInitLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16'};fcnNum=fcnNum+1;
% short WINAPI SONSetEventChan ( short fh , unsigned short chan , short sPhyCh , long lBufSz , const char * szCom , const char * szTitle , float fRate , TDataKind evtKind ); 
fcns.name{fcnNum}='SONSetEventChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'cstring', 'cstring', 'single', 'TDataKind'};fcnNum=fcnNum+1;
% short WINAPI SONSetBuffering ( short fh , int nChan , int nBytes ); 
fcns.name{fcnNum}='SONSetBuffering'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int32', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONUpdateStart ( short fh ); 
fcns.name{fcnNum}='SONUpdateStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% void WINAPI SONSetFileComment ( short fh , unsigned short which , const char * szFCom ); 
fcns.name{fcnNum}='SONSetFileComment'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring'};fcnNum=fcnNum+1;
% void WINAPI SONGetFileComment ( short fh , unsigned short which , char * pcFCom , short sMax ); 
fcns.name{fcnNum}='SONGetFileComment'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring', 'int16'};fcnNum=fcnNum+1;
% void WINAPI SONSetChanComment ( short fh , unsigned short chan , const char * szCom ); 
fcns.name{fcnNum}='SONSetChanComment'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring'};fcnNum=fcnNum+1;
% void WINAPI SONGetChanComment ( short fh , unsigned short chan , char * pcCom , short sMax ); 
fcns.name{fcnNum}='SONGetChanComment'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring', 'int16'};fcnNum=fcnNum+1;
% void WINAPI SONSetChanTitle ( short fh , unsigned short chan , const char * szTitle ); 
fcns.name{fcnNum}='SONSetChanTitle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring'};fcnNum=fcnNum+1;
% void WINAPI SONGetChanTitle ( short fh , unsigned short chan , char * pcTitle ); 
fcns.name{fcnNum}='SONGetChanTitle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring'};fcnNum=fcnNum+1;
% void WINAPI SONGetIdealLimits ( short fh , unsigned short chan , float * pfRate , float * pfMin , float * pfMax ); 
fcns.name{fcnNum}='SONGetIdealLimits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% unsigned short WINAPI SONGetusPerTime ( short fh ); 
fcns.name{fcnNum}='SONGetusPerTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% unsigned short WINAPI SONGetTimePerADC ( short fh ); 
fcns.name{fcnNum}='SONGetTimePerADC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% void WINAPI SONSetADCUnits ( short fh , unsigned short chan , const char * szUnt ); 
fcns.name{fcnNum}='SONSetADCUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring'};fcnNum=fcnNum+1;
% void WINAPI SONSetADCOffset ( short fh , unsigned short chan , float offset ); 
fcns.name{fcnNum}='SONSetADCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'single'};fcnNum=fcnNum+1;
% void WINAPI SONSetADCScale ( short fh , unsigned short chan , float scale ); 
fcns.name{fcnNum}='SONSetADCScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'single'};fcnNum=fcnNum+1;
% void WINAPI SONGetADCInfo ( short fh , unsigned short chan , float * scale , float * offset , char * pcUnt , unsigned short * points , short * preTrig ); 
fcns.name{fcnNum}='SONGetADCInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'singlePtr', 'singlePtr', 'cstring', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% void WINAPI SONGetExtMarkInfo ( short fh , unsigned short chan , char * pcUnt , unsigned short * points , short * preTrig ); 
fcns.name{fcnNum}='SONGetExtMarkInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'cstring', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% short WINAPI SONWriteEventBlock ( short fh , unsigned short chan , TpSTime plBuf , long count ); 
fcns.name{fcnNum}='SONWriteEventBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONWriteMarkBlock ( short fh , unsigned short chan , TpMarker pM , long count ); 
fcns.name{fcnNum}='SONWriteMarkBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32'};fcnNum=fcnNum+1;
% TSTime WINAPI SONWriteADCBlock ( short fh , unsigned short chan , TpAdc psBuf , long count , TSTime sTime ); 
fcns.name{fcnNum}='SONWriteADCBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONWriteExtMarkBlock ( short fh , unsigned short chan , TpMarker pM , long count ); 
fcns.name{fcnNum}='SONWriteExtMarkBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONSave ( short fh , int nChan , TSTime sTime , short bKeep ); 
fcns.name{fcnNum}='SONSave'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int32', 'int32', 'int16'};fcnNum=fcnNum+1;
% short WINAPI SONSaveRange ( short fh , int nChan , TSTime sTime , TSTime eTime ); 
fcns.name{fcnNum}='SONSaveRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONKillRange ( short fh , int nChan , TSTime sTime , TSTime eTime ); 
fcns.name{fcnNum}='SONKillRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONIsSaving ( short fh , int nChan ); 
fcns.name{fcnNum}='SONIsSaving'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int32'};fcnNum=fcnNum+1;
% unsigned long WINAPI SONFileBytes ( short fh ); 
fcns.name{fcnNum}='SONFileBytes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% unsigned long WINAPI SONChanBytes ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanBytes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% short WINAPI SONLatestTime ( short fh , unsigned short chan , TSTime sTime ); 
fcns.name{fcnNum}='SONLatestTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONCommitIdle ( short fh ); 
fcns.name{fcnNum}='SONCommitIdle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONCommitFile ( short fh , short bDelete ); 
fcns.name{fcnNum}='SONCommitFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% long WINAPI SONGetEventData ( short fh , unsigned short chan , TpSTime plTimes , long max , TSTime sTime , TSTime eTime , TpBOOL levLowP , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONGetEventData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'int32', 'int32', 'error', 'error'};fcnNum=fcnNum+1;
% long WINAPI SONGetMarkData ( short fh , unsigned short chan , TpMarker pMark , long max , TSTime sTime , TSTime eTime , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONGetMarkData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'int32', 'int32', 'error'};fcnNum=fcnNum+1;
% long WINAPI SONGetADCData ( short fh , unsigned short chan , TpAdc adcDataP , long max , TSTime sTime , TSTime eTime , TpSTime pbTime , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONGetADCData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'int32', 'int32', 'error', 'error'};fcnNum=fcnNum+1;
% long WINAPI SONGetExtMarkData ( short fh , unsigned short chan , TpMarker pMark , long max , TSTime sTime , TSTime eTime , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONGetExtMarkData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'int32', 'int32', 'error'};fcnNum=fcnNum+1;
% long WINAPI SONGetExtraDataSize ( short fh ); 
fcns.name{fcnNum}='SONGetExtraDataSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% int WINAPI SONGetVersion ( short fh ); 
fcns.name{fcnNum}='SONGetVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% short WINAPI SONGetExtraData ( short fh , TpVoid buff , unsigned short bytes , unsigned short offset , short writeIt ); 
fcns.name{fcnNum}='SONGetExtraData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'error', 'uint16', 'uint16', 'int16'};fcnNum=fcnNum+1;
% short WINAPI SONSetMarker ( short fh , unsigned short chan , TSTime time , TpMarker pMark , unsigned short size ); 
fcns.name{fcnNum}='SONSetMarker'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int32', 'error', 'uint16'};fcnNum=fcnNum+1;
% short WINAPI SONChanDelete ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanDelete'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% TDataKind WINAPI SONChanKind ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanKind'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='TDataKind'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% TSTime WINAPI SONChanDivide ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanDivide'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% unsigned short WINAPI SONItemSize ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONItemSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% TSTime WINAPI SONChanMaxTime ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanMaxTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% TSTime WINAPI SONMaxTime ( short fh ); 
fcns.name{fcnNum}='SONMaxTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% TSTime WINAPI SONLastTime ( short fh , unsigned short wChan , TSTime sTime , TSTime eTime , TpVoid pvVal , TpMarkBytes pMB , TpBOOL pbMk , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONLastTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int32', 'int32', 'error', 'error', 'error', 'error'};fcnNum=fcnNum+1;
% TSTime WINAPI SONLastPointsTime ( short fh , unsigned short wChan , TSTime sTime , TSTime eTime , long lPoints , short bAdc , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONLastPointsTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int32', 'int32', 'int32', 'int16', 'error'};fcnNum=fcnNum+1;
% long WINAPI SONFileSize ( short fh ); 
fcns.name{fcnNum}='SONFileSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% int WINAPI SONMarkerItem ( short fh , unsigned short wChan , TpMarker pBuff , int n , TpMarker pM , TpVoid pvData , short bSet ); 
fcns.name{fcnNum}='SONMarkerItem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'error', 'int32', 'error', 'error', 'int16'};fcnNum=fcnNum+1;
% int WINAPI SONFilter ( TpMarker pM , TpFilterMask pFM ); 
fcns.name{fcnNum}='SONFilter'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error', 'error'};fcnNum=fcnNum+1;
% int WINAPI SONFControl ( TpFilterMask pFM , int layer , int item , int set ); 
fcns.name{fcnNum}='SONFControl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONFEqual ( TpFilterMask pFiltMask1 , TpFilterMask pFiltMask2 ); 
fcns.name{fcnNum}='SONFEqual'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'error', 'error'};fcnNum=fcnNum+1;
% int WINAPI SONFActive ( TpFilterMask pFM ); 
fcns.name{fcnNum}='SONFActive'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% long WINAPI SONFMode ( TpFilterMask pFM , long lNew ); 
fcns.name{fcnNum}='SONFMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error', 'int32'};fcnNum=fcnNum+1;
% short WINAPI SONCreateFile ( const char * name , int nChannels , unsigned short extra ); 
fcns.name{fcnNum}='SONCreateFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring', 'int32', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONMaxChans ( short fh ); 
fcns.name{fcnNum}='SONMaxChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% int WINAPI SONPhyChan ( short fh , unsigned short wChan ); 
fcns.name{fcnNum}='SONPhyChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% float WINAPI SONIdealRate ( short fh , unsigned short wChan , float fIR ); 
fcns.name{fcnNum}='SONIdealRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'int16', 'uint16', 'single'};fcnNum=fcnNum+1;
% void WINAPI SONYRange ( short fh , unsigned short chan , float * pfMin , float * pfMax ); 
fcns.name{fcnNum}='SONYRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16', 'uint16', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% int WINAPI SONYRangeSet ( short fh , unsigned short chan , float fMin , float fMax ); 
fcns.name{fcnNum}='SONYRangeSet'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'single', 'single'};fcnNum=fcnNum+1;
% int WINAPI SONMaxItems ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONMaxItems'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONPhySz ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONPhySz'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONBlocks ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONBlocks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONDelBlocks ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONDelBlocks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONSetRealChan ( short fh , unsigned short chan , short sPhyChan , TSTime dvd , long lBufSz , const char * szCom , const char * szTitle , float scale , float offset , const char * szUnt ); 
fcns.name{fcnNum}='SONSetRealChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'int16', 'int32', 'int32', 'cstring', 'cstring', 'single', 'single', 'cstring'};fcnNum=fcnNum+1;
% TSTime WINAPI SONWriteRealBlock ( short fh , unsigned short chan , float * pfBuff , long count , TSTime sTime ); 
fcns.name{fcnNum}='SONWriteRealBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'singlePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% long WINAPI SONGetRealData ( short fh , unsigned short chan , float * pfData , long max , TSTime sTime , TSTime eTime , TpSTime pbTime , TpFilterMask pFiltMask ); 
fcns.name{fcnNum}='SONGetRealData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16', 'singlePtr', 'int32', 'int32', 'int32', 'error', 'error'};fcnNum=fcnNum+1;
% int WINAPI SONTimeDate ( short fh , TSONTimeDate * pTDGet , const TSONTimeDate * pTDSet ); 
fcns.name{fcnNum}='SONTimeDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'TSONTimeDatePtr', 'TSONTimeDatePtr'};fcnNum=fcnNum+1;
% double WINAPI SONTimeBase ( short fh , double dTB ); 
fcns.name{fcnNum}='SONTimeBase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int16', 'double'};fcnNum=fcnNum+1;
% int WINAPI SONAppID ( short fh , TSONCreator * pCGet , const TSONCreator * pCSet ); 
fcns.name{fcnNum}='SONAppID'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'TSONCreatorPtr', 'TSONCreatorPtr'};fcnNum=fcnNum+1;
% int WINAPI SONChanInterleave ( short fh , unsigned short chan ); 
fcns.name{fcnNum}='SONChanInterleave'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'uint16'};fcnNum=fcnNum+1;
% int WINAPI SONExtMarkAlign ( short fh , int n ); 
fcns.name{fcnNum}='SONExtMarkAlign'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16', 'int32'};fcnNum=fcnNum+1;
structs.TMarker.packing=8;
structs.TMarker.members=struct('mark', 'int32', 'mvals', 'int8#4');
structs.TAdcMark.packing=8;
structs.TAdcMark.members=struct('m', 'TMarker', 'a', 'int16#4096');
structs.TRealMark.packing=8;
structs.TRealMark.members=struct('m', 'TMarker', 'r', 'single#512');
structs.TTextMark.packing=8;
structs.TTextMark.members=struct('m', 'TMarker', 't', 'int8#2048');
structs.TFilterMask.packing=8;
structs.TFilterMask.members=struct('lFlags', 'int32', 'aMask', 'uint8#32#4');
structs.TSONTimeDate.packing=8;
structs.TSONTimeDate.members=struct('ucHun', 'uint8', 'ucSec', 'uint8', 'ucMin', 'uint8', 'ucHour', 'uint8', 'ucDay', 'uint8', 'ucMon', 'uint8', 'wYear', 'uint16');
structs.TSONCreator.packing=8;
structs.TSONCreator.members=struct('acID', 'int8#8');
enuminfo.TDataKind=struct('ChanOff',0,'Adc',1,'EventFall',2,'EventRise',3,'EventBoth',4,'Marker',5,'AdcMark',6,'RealMark',7,'TextMark',8,'RealWave',9);
methodinfo=fcns;